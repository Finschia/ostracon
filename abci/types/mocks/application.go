// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	tmabci "github.com/tendermint/tendermint/abci/types"

	types "github.com/line/ostracon/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// ApplySnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) ApplySnapshotChunk(_a0 tmabci.RequestApplySnapshotChunk) tmabci.ResponseApplySnapshotChunk {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseApplySnapshotChunk
	if rf, ok := ret.Get(0).(func(tmabci.RequestApplySnapshotChunk) tmabci.ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseApplySnapshotChunk)
	}

	return r0
}

// BeginBlock provides a mock function with given fields: _a0
func (_m *Application) BeginBlock(_a0 types.RequestBeginBlock) tmabci.ResponseBeginBlock {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseBeginBlock
	if rf, ok := ret.Get(0).(func(types.RequestBeginBlock) tmabci.ResponseBeginBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseBeginBlock)
	}

	return r0
}

// BeginRecheckTx provides a mock function with given fields: _a0
func (_m *Application) BeginRecheckTx(_a0 types.RequestBeginRecheckTx) types.ResponseBeginRecheckTx {
	ret := _m.Called(_a0)

	var r0 types.ResponseBeginRecheckTx
	if rf, ok := ret.Get(0).(func(types.RequestBeginRecheckTx) types.ResponseBeginRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseBeginRecheckTx)
	}

	return r0
}

// CheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Application) CheckTxAsync(_a0 tmabci.RequestCheckTx, _a1 types.CheckTxCallback) {
	_m.Called(_a0, _a1)
}

// CheckTxSync provides a mock function with given fields: _a0
func (_m *Application) CheckTxSync(_a0 tmabci.RequestCheckTx) types.ResponseCheckTx {
	ret := _m.Called(_a0)

	var r0 types.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(tmabci.RequestCheckTx) types.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseCheckTx)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Application) Commit() tmabci.ResponseCommit {
	ret := _m.Called()

	var r0 tmabci.ResponseCommit
	if rf, ok := ret.Get(0).(func() tmabci.ResponseCommit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(tmabci.ResponseCommit)
	}

	return r0
}

// DeliverTx provides a mock function with given fields: _a0
func (_m *Application) DeliverTx(_a0 tmabci.RequestDeliverTx) tmabci.ResponseDeliverTx {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseDeliverTx
	if rf, ok := ret.Get(0).(func(tmabci.RequestDeliverTx) tmabci.ResponseDeliverTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseDeliverTx)
	}

	return r0
}

// EndBlock provides a mock function with given fields: _a0
func (_m *Application) EndBlock(_a0 tmabci.RequestEndBlock) types.ResponseEndBlock {
	ret := _m.Called(_a0)

	var r0 types.ResponseEndBlock
	if rf, ok := ret.Get(0).(func(tmabci.RequestEndBlock) types.ResponseEndBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseEndBlock)
	}

	return r0
}

// EndRecheckTx provides a mock function with given fields: _a0
func (_m *Application) EndRecheckTx(_a0 types.RequestEndRecheckTx) types.ResponseEndRecheckTx {
	ret := _m.Called(_a0)

	var r0 types.ResponseEndRecheckTx
	if rf, ok := ret.Get(0).(func(types.RequestEndRecheckTx) types.ResponseEndRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseEndRecheckTx)
	}

	return r0
}

// Info provides a mock function with given fields: _a0
func (_m *Application) Info(_a0 tmabci.RequestInfo) tmabci.ResponseInfo {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseInfo
	if rf, ok := ret.Get(0).(func(tmabci.RequestInfo) tmabci.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseInfo)
	}

	return r0
}

// InitChain provides a mock function with given fields: _a0
func (_m *Application) InitChain(_a0 types.RequestInitChain) types.ResponseInitChain {
	ret := _m.Called(_a0)

	var r0 types.ResponseInitChain
	if rf, ok := ret.Get(0).(func(types.RequestInitChain) types.ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.ResponseInitChain)
	}

	return r0
}

// ListSnapshots provides a mock function with given fields: _a0
func (_m *Application) ListSnapshots(_a0 tmabci.RequestListSnapshots) tmabci.ResponseListSnapshots {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseListSnapshots
	if rf, ok := ret.Get(0).(func(tmabci.RequestListSnapshots) tmabci.ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseListSnapshots)
	}

	return r0
}

// LoadSnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) LoadSnapshotChunk(_a0 tmabci.RequestLoadSnapshotChunk) tmabci.ResponseLoadSnapshotChunk {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseLoadSnapshotChunk
	if rf, ok := ret.Get(0).(func(tmabci.RequestLoadSnapshotChunk) tmabci.ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseLoadSnapshotChunk)
	}

	return r0
}

// OfferSnapshot provides a mock function with given fields: _a0
func (_m *Application) OfferSnapshot(_a0 tmabci.RequestOfferSnapshot) tmabci.ResponseOfferSnapshot {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseOfferSnapshot
	if rf, ok := ret.Get(0).(func(tmabci.RequestOfferSnapshot) tmabci.ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseOfferSnapshot)
	}

	return r0
}

// Query provides a mock function with given fields: _a0
func (_m *Application) Query(_a0 tmabci.RequestQuery) tmabci.ResponseQuery {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseQuery
	if rf, ok := ret.Get(0).(func(tmabci.RequestQuery) tmabci.ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseQuery)
	}

	return r0
}

// SetOption provides a mock function with given fields: _a0
func (_m *Application) SetOption(_a0 tmabci.RequestSetOption) tmabci.ResponseSetOption {
	ret := _m.Called(_a0)

	var r0 tmabci.ResponseSetOption
	if rf, ok := ret.Get(0).(func(tmabci.RequestSetOption) tmabci.ResponseSetOption); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tmabci.ResponseSetOption)
	}

	return r0
}

type mockConstructorTestingTNewApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplication(t mockConstructorTestingTNewApplication) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
