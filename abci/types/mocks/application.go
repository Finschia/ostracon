// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	abci "github.com/tendermint/tendermint/abci/types"

	ocabci "github.com/line/ostracon/abci/types"
	mock "github.com/stretchr/testify/mock"
)

// Application is an autogenerated mock type for the Application type
type Application struct {
	mock.Mock
}

// ApplySnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) ApplySnapshotChunk(_a0 abci.RequestApplySnapshotChunk) abci.ResponseApplySnapshotChunk {
	ret := _m.Called(_a0)

	var r0 abci.ResponseApplySnapshotChunk
	if rf, ok := ret.Get(0).(func(abci.RequestApplySnapshotChunk) abci.ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseApplySnapshotChunk)
	}

	return r0
}

// BeginBlock provides a mock function with given fields: _a0
func (_m *Application) BeginBlock(_a0 ocabci.RequestBeginBlock) abci.ResponseBeginBlock {
	ret := _m.Called(_a0)

	var r0 abci.ResponseBeginBlock
	if rf, ok := ret.Get(0).(func(ocabci.RequestBeginBlock) abci.ResponseBeginBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseBeginBlock)
	}

	return r0
}

// BeginRecheckTx provides a mock function with given fields: _a0
func (_m *Application) BeginRecheckTx(_a0 ocabci.RequestBeginRecheckTx) ocabci.ResponseBeginRecheckTx {
	ret := _m.Called(_a0)

	var r0 ocabci.ResponseBeginRecheckTx
	if rf, ok := ret.Get(0).(func(ocabci.RequestBeginRecheckTx) ocabci.ResponseBeginRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ocabci.ResponseBeginRecheckTx)
	}

	return r0
}

// CheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Application) CheckTxAsync(_a0 abci.RequestCheckTx, _a1 ocabci.CheckTxCallback) {
	_m.Called(_a0, _a1)
}

// CheckTxSync provides a mock function with given fields: _a0
func (_m *Application) CheckTxSync(_a0 abci.RequestCheckTx) ocabci.ResponseCheckTx {
	ret := _m.Called(_a0)

	var r0 ocabci.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(abci.RequestCheckTx) ocabci.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ocabci.ResponseCheckTx)
	}

	return r0
}

// Commit provides a mock function with given fields:
func (_m *Application) Commit() abci.ResponseCommit {
	ret := _m.Called()

	var r0 abci.ResponseCommit
	if rf, ok := ret.Get(0).(func() abci.ResponseCommit); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(abci.ResponseCommit)
	}

	return r0
}

// DeliverTx provides a mock function with given fields: _a0
func (_m *Application) DeliverTx(_a0 abci.RequestDeliverTx) abci.ResponseDeliverTx {
	ret := _m.Called(_a0)

	var r0 abci.ResponseDeliverTx
	if rf, ok := ret.Get(0).(func(abci.RequestDeliverTx) abci.ResponseDeliverTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseDeliverTx)
	}

	return r0
}

// EndBlock provides a mock function with given fields: _a0
func (_m *Application) EndBlock(_a0 abci.RequestEndBlock) abci.ResponseEndBlock {
	ret := _m.Called(_a0)

	var r0 abci.ResponseEndBlock
	if rf, ok := ret.Get(0).(func(abci.RequestEndBlock) abci.ResponseEndBlock); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseEndBlock)
	}

	return r0
}

// EndRecheckTx provides a mock function with given fields: _a0
func (_m *Application) EndRecheckTx(_a0 ocabci.RequestEndRecheckTx) ocabci.ResponseEndRecheckTx {
	ret := _m.Called(_a0)

	var r0 ocabci.ResponseEndRecheckTx
	if rf, ok := ret.Get(0).(func(ocabci.RequestEndRecheckTx) ocabci.ResponseEndRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ocabci.ResponseEndRecheckTx)
	}

	return r0
}

// Info provides a mock function with given fields: _a0
func (_m *Application) Info(_a0 abci.RequestInfo) abci.ResponseInfo {
	ret := _m.Called(_a0)

	var r0 abci.ResponseInfo
	if rf, ok := ret.Get(0).(func(abci.RequestInfo) abci.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseInfo)
	}

	return r0
}

// InitChain provides a mock function with given fields: _a0
func (_m *Application) InitChain(_a0 abci.RequestInitChain) ocabci.ResponseInitChain {
	ret := _m.Called(_a0)

	var r0 ocabci.ResponseInitChain
	if rf, ok := ret.Get(0).(func(abci.RequestInitChain) ocabci.ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(ocabci.ResponseInitChain)
	}

	return r0
}

// ListSnapshots provides a mock function with given fields: _a0
func (_m *Application) ListSnapshots(_a0 abci.RequestListSnapshots) abci.ResponseListSnapshots {
	ret := _m.Called(_a0)

	var r0 abci.ResponseListSnapshots
	if rf, ok := ret.Get(0).(func(abci.RequestListSnapshots) abci.ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseListSnapshots)
	}

	return r0
}

// LoadSnapshotChunk provides a mock function with given fields: _a0
func (_m *Application) LoadSnapshotChunk(_a0 abci.RequestLoadSnapshotChunk) abci.ResponseLoadSnapshotChunk {
	ret := _m.Called(_a0)

	var r0 abci.ResponseLoadSnapshotChunk
	if rf, ok := ret.Get(0).(func(abci.RequestLoadSnapshotChunk) abci.ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseLoadSnapshotChunk)
	}

	return r0
}

// OfferSnapshot provides a mock function with given fields: _a0
func (_m *Application) OfferSnapshot(_a0 abci.RequestOfferSnapshot) abci.ResponseOfferSnapshot {
	ret := _m.Called(_a0)

	var r0 abci.ResponseOfferSnapshot
	if rf, ok := ret.Get(0).(func(abci.RequestOfferSnapshot) abci.ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseOfferSnapshot)
	}

	return r0
}

// Query provides a mock function with given fields: _a0
func (_m *Application) Query(_a0 abci.RequestQuery) abci.ResponseQuery {
	ret := _m.Called(_a0)

	var r0 abci.ResponseQuery
	if rf, ok := ret.Get(0).(func(abci.RequestQuery) abci.ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseQuery)
	}

	return r0
}

// SetOption provides a mock function with given fields: _a0
func (_m *Application) SetOption(_a0 abci.RequestSetOption) abci.ResponseSetOption {
	ret := _m.Called(_a0)

	var r0 abci.ResponseSetOption
	if rf, ok := ret.Get(0).(func(abci.RequestSetOption) abci.ResponseSetOption); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(abci.ResponseSetOption)
	}

	return r0
}

type mockConstructorTestingTNewApplication interface {
	mock.TestingT
	Cleanup(func())
}

// NewApplication creates a new instance of Application. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplication(t mockConstructorTestingTNewApplication) *Application {
	mock := &Application{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
