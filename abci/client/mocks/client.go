// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	tmabci "github.com/tendermint/tendermint/abci/types"

	abcicli "github.com/line/ostracon/abci/client"
	abci "github.com/line/ostracon/abci/types"
	log "github.com/line/ostracon/libs/log"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// ApplySnapshotChunkAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) ApplySnapshotChunkAsync(_a0 tmabci.RequestApplySnapshotChunk, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestApplySnapshotChunk, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// ApplySnapshotChunkSync provides a mock function with given fields: _a0
func (_m *Client) ApplySnapshotChunkSync(_a0 tmabci.RequestApplySnapshotChunk) (*tmabci.ResponseApplySnapshotChunk, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseApplySnapshotChunk
	if rf, ok := ret.Get(0).(func(tmabci.RequestApplySnapshotChunk) *tmabci.ResponseApplySnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseApplySnapshotChunk)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestApplySnapshotChunk) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginBlockAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) BeginBlockAsync(_a0 abci.RequestBeginBlock, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abci.RequestBeginBlock, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// BeginBlockSync provides a mock function with given fields: _a0
func (_m *Client) BeginBlockSync(_a0 abci.RequestBeginBlock) (*tmabci.ResponseBeginBlock, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseBeginBlock
	if rf, ok := ret.Get(0).(func(abci.RequestBeginBlock) *tmabci.ResponseBeginBlock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseBeginBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestBeginBlock) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BeginRecheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) BeginRecheckTxAsync(_a0 abci.RequestBeginRecheckTx, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abci.RequestBeginRecheckTx, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// BeginRecheckTxSync provides a mock function with given fields: _a0
func (_m *Client) BeginRecheckTxSync(_a0 abci.RequestBeginRecheckTx) (*abci.ResponseBeginRecheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseBeginRecheckTx
	if rf, ok := ret.Get(0).(func(abci.RequestBeginRecheckTx) *abci.ResponseBeginRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseBeginRecheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestBeginRecheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) CheckTxAsync(_a0 tmabci.RequestCheckTx, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestCheckTx, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// CheckTxSync provides a mock function with given fields: _a0
func (_m *Client) CheckTxSync(_a0 tmabci.RequestCheckTx) (*abci.ResponseCheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseCheckTx
	if rf, ok := ret.Get(0).(func(tmabci.RequestCheckTx) *abci.ResponseCheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseCheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestCheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CommitAsync provides a mock function with given fields: _a0
func (_m *Client) CommitAsync(_a0 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// CommitSync provides a mock function with given fields:
func (_m *Client) CommitSync() (*tmabci.ResponseCommit, error) {
	ret := _m.Called()

	var r0 *tmabci.ResponseCommit
	if rf, ok := ret.Get(0).(func() *tmabci.ResponseCommit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseCommit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeliverTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) DeliverTxAsync(_a0 tmabci.RequestDeliverTx, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestDeliverTx, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// DeliverTxSync provides a mock function with given fields: _a0
func (_m *Client) DeliverTxSync(_a0 tmabci.RequestDeliverTx) (*tmabci.ResponseDeliverTx, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseDeliverTx
	if rf, ok := ret.Get(0).(func(tmabci.RequestDeliverTx) *tmabci.ResponseDeliverTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseDeliverTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestDeliverTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EchoAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) EchoAsync(_a0 string, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(string, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// EchoSync provides a mock function with given fields: _a0
func (_m *Client) EchoSync(_a0 string) (*tmabci.ResponseEcho, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseEcho
	if rf, ok := ret.Get(0).(func(string) *tmabci.ResponseEcho); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseEcho)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndBlockAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) EndBlockAsync(_a0 tmabci.RequestEndBlock, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestEndBlock, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// EndBlockSync provides a mock function with given fields: _a0
func (_m *Client) EndBlockSync(_a0 tmabci.RequestEndBlock) (*abci.ResponseEndBlock, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseEndBlock
	if rf, ok := ret.Get(0).(func(tmabci.RequestEndBlock) *abci.ResponseEndBlock); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseEndBlock)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestEndBlock) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EndRecheckTxAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) EndRecheckTxAsync(_a0 abci.RequestEndRecheckTx, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abci.RequestEndRecheckTx, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// EndRecheckTxSync provides a mock function with given fields: _a0
func (_m *Client) EndRecheckTxSync(_a0 abci.RequestEndRecheckTx) (*abci.ResponseEndRecheckTx, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseEndRecheckTx
	if rf, ok := ret.Get(0).(func(abci.RequestEndRecheckTx) *abci.ResponseEndRecheckTx); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseEndRecheckTx)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestEndRecheckTx) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Error provides a mock function with given fields:
func (_m *Client) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FlushAsync provides a mock function with given fields: _a0
func (_m *Client) FlushAsync(_a0 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// FlushSync provides a mock function with given fields:
func (_m *Client) FlushSync() (*tmabci.ResponseFlush, error) {
	ret := _m.Called()

	var r0 *tmabci.ResponseFlush
	if rf, ok := ret.Get(0).(func() *tmabci.ResponseFlush); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseFlush)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlobalCallback provides a mock function with given fields:
func (_m *Client) GetGlobalCallback() abcicli.GlobalCallback {
	ret := _m.Called()

	var r0 abcicli.GlobalCallback
	if rf, ok := ret.Get(0).(func() abcicli.GlobalCallback); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(abcicli.GlobalCallback)
		}
	}

	return r0
}

// InfoAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) InfoAsync(_a0 tmabci.RequestInfo, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestInfo, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// InfoSync provides a mock function with given fields: _a0
func (_m *Client) InfoSync(_a0 tmabci.RequestInfo) (*tmabci.ResponseInfo, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseInfo
	if rf, ok := ret.Get(0).(func(tmabci.RequestInfo) *tmabci.ResponseInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestInfo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitChainAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) InitChainAsync(_a0 abci.RequestInitChain, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(abci.RequestInitChain, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// InitChainSync provides a mock function with given fields: _a0
func (_m *Client) InitChainSync(_a0 abci.RequestInitChain) (*abci.ResponseInitChain, error) {
	ret := _m.Called(_a0)

	var r0 *abci.ResponseInitChain
	if rf, ok := ret.Get(0).(func(abci.RequestInitChain) *abci.ResponseInitChain); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abci.ResponseInitChain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(abci.RequestInitChain) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRunning provides a mock function with given fields:
func (_m *Client) IsRunning() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ListSnapshotsAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) ListSnapshotsAsync(_a0 tmabci.RequestListSnapshots, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestListSnapshots, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// ListSnapshotsSync provides a mock function with given fields: _a0
func (_m *Client) ListSnapshotsSync(_a0 tmabci.RequestListSnapshots) (*tmabci.ResponseListSnapshots, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseListSnapshots
	if rf, ok := ret.Get(0).(func(tmabci.RequestListSnapshots) *tmabci.ResponseListSnapshots); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseListSnapshots)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestListSnapshots) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoadSnapshotChunkAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) LoadSnapshotChunkAsync(_a0 tmabci.RequestLoadSnapshotChunk, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestLoadSnapshotChunk, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// LoadSnapshotChunkSync provides a mock function with given fields: _a0
func (_m *Client) LoadSnapshotChunkSync(_a0 tmabci.RequestLoadSnapshotChunk) (*tmabci.ResponseLoadSnapshotChunk, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseLoadSnapshotChunk
	if rf, ok := ret.Get(0).(func(tmabci.RequestLoadSnapshotChunk) *tmabci.ResponseLoadSnapshotChunk); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseLoadSnapshotChunk)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestLoadSnapshotChunk) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OfferSnapshotAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) OfferSnapshotAsync(_a0 tmabci.RequestOfferSnapshot, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestOfferSnapshot, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// OfferSnapshotSync provides a mock function with given fields: _a0
func (_m *Client) OfferSnapshotSync(_a0 tmabci.RequestOfferSnapshot) (*tmabci.ResponseOfferSnapshot, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseOfferSnapshot
	if rf, ok := ret.Get(0).(func(tmabci.RequestOfferSnapshot) *tmabci.ResponseOfferSnapshot); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseOfferSnapshot)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestOfferSnapshot) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnReset provides a mock function with given fields:
func (_m *Client) OnReset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStart provides a mock function with given fields:
func (_m *Client) OnStart() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStop provides a mock function with given fields:
func (_m *Client) OnStop() {
	_m.Called()
}

// QueryAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) QueryAsync(_a0 tmabci.RequestQuery, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestQuery, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// QuerySync provides a mock function with given fields: _a0
func (_m *Client) QuerySync(_a0 tmabci.RequestQuery) (*tmabci.ResponseQuery, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseQuery
	if rf, ok := ret.Get(0).(func(tmabci.RequestQuery) *tmabci.ResponseQuery); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseQuery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestQuery) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Quit provides a mock function with given fields:
func (_m *Client) Quit() <-chan struct{} {
	ret := _m.Called()

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Reset provides a mock function with given fields:
func (_m *Client) Reset() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetGlobalCallback provides a mock function with given fields: _a0
func (_m *Client) SetGlobalCallback(_a0 abcicli.GlobalCallback) {
	_m.Called(_a0)
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Client) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// SetOptionAsync provides a mock function with given fields: _a0, _a1
func (_m *Client) SetOptionAsync(_a0 tmabci.RequestSetOption, _a1 abcicli.ResponseCallback) *abcicli.ReqRes {
	ret := _m.Called(_a0, _a1)

	var r0 *abcicli.ReqRes
	if rf, ok := ret.Get(0).(func(tmabci.RequestSetOption, abcicli.ResponseCallback) *abcicli.ReqRes); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*abcicli.ReqRes)
		}
	}

	return r0
}

// SetOptionSync provides a mock function with given fields: _a0
func (_m *Client) SetOptionSync(_a0 tmabci.RequestSetOption) (*tmabci.ResponseSetOption, error) {
	ret := _m.Called(_a0)

	var r0 *tmabci.ResponseSetOption
	if rf, ok := ret.Get(0).(func(tmabci.RequestSetOption) *tmabci.ResponseSetOption); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tmabci.ResponseSetOption)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(tmabci.RequestSetOption) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Client) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with given fields:
func (_m *Client) Stop() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields:
func (_m *Client) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClient(t mockConstructorTestingTNewClient) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
