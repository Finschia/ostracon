// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	p2p "github.com/Finschia/ostracon/p2p"
	mock "github.com/stretchr/testify/mock"
)

// EnvelopeSender is an autogenerated mock type for the EnvelopeSender type
type EnvelopeSender struct {
	mock.Mock
}

// SendEnvelope provides a mock function with given fields: _a0
func (_m *EnvelopeSender) SendEnvelope(_a0 p2p.Envelope) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TrySendEnvelope provides a mock function with given fields: _a0
func (_m *EnvelopeSender) TrySendEnvelope(_a0 p2p.Envelope) bool {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(p2p.Envelope) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewEnvelopeSender creates a new instance of EnvelopeSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEnvelopeSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *EnvelopeSender {
	mock := &EnvelopeSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
