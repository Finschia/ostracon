// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ostracon/types/voter.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoterSet struct {
	Voters            []*Validator `protobuf:"bytes,1,rep,name=voters,proto3" json:"voters,omitempty"`
	TotalStakingPower int64        `protobuf:"varint,2,opt,name=total_staking_power,json=totalStakingPower,proto3" json:"total_staking_power,omitempty"`
}

func (m *VoterSet) Reset()         { *m = VoterSet{} }
func (m *VoterSet) String() string { return proto.CompactTextString(m) }
func (*VoterSet) ProtoMessage()    {}
func (*VoterSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9565f097e29c5b3, []int{0}
}
func (m *VoterSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterSet.Merge(m, src)
}
func (m *VoterSet) XXX_Size() int {
	return m.Size()
}
func (m *VoterSet) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterSet.DiscardUnknown(m)
}

var xxx_messageInfo_VoterSet proto.InternalMessageInfo

func (m *VoterSet) GetVoters() []*Validator {
	if m != nil {
		return m.Voters
	}
	return nil
}

func (m *VoterSet) GetTotalStakingPower() int64 {
	if m != nil {
		return m.TotalStakingPower
	}
	return 0
}

type VoterParams struct {
	VoterElectionThreshold          int32 `protobuf:"varint,1,opt,name=voter_election_threshold,json=voterElectionThreshold,proto3" json:"voter_election_threshold,omitempty"`
	MaxTolerableByzantinePercentage int32 `protobuf:"varint,2,opt,name=max_tolerable_byzantine_percentage,json=maxTolerableByzantinePercentage,proto3" json:"max_tolerable_byzantine_percentage,omitempty"`
}

func (m *VoterParams) Reset()         { *m = VoterParams{} }
func (m *VoterParams) String() string { return proto.CompactTextString(m) }
func (*VoterParams) ProtoMessage()    {}
func (*VoterParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9565f097e29c5b3, []int{1}
}
func (m *VoterParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoterParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoterParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoterParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoterParams.Merge(m, src)
}
func (m *VoterParams) XXX_Size() int {
	return m.Size()
}
func (m *VoterParams) XXX_DiscardUnknown() {
	xxx_messageInfo_VoterParams.DiscardUnknown(m)
}

var xxx_messageInfo_VoterParams proto.InternalMessageInfo

func (m *VoterParams) GetVoterElectionThreshold() int32 {
	if m != nil {
		return m.VoterElectionThreshold
	}
	return 0
}

func (m *VoterParams) GetMaxTolerableByzantinePercentage() int32 {
	if m != nil {
		return m.MaxTolerableByzantinePercentage
	}
	return 0
}

func init() {
	proto.RegisterType((*VoterSet)(nil), "ostracon.types.VoterSet")
	proto.RegisterType((*VoterParams)(nil), "ostracon.types.VoterParams")
}

func init() { proto.RegisterFile("ostracon/types/voter.proto", fileDescriptor_d9565f097e29c5b3) }

var fileDescriptor_d9565f097e29c5b3 = []byte{
	// 301 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x18, 0x86, 0x7b, 0x96, 0x16, 0xb9, 0x82, 0x60, 0x04, 0x89, 0x1d, 0xce, 0xd2, 0xa9, 0x8b, 0x09,
	0xea, 0xe2, 0x5c, 0x10, 0x07, 0x97, 0x92, 0x96, 0x0e, 0x2e, 0xc7, 0x25, 0xfd, 0x68, 0x83, 0x97,
	0xfb, 0xc2, 0xdd, 0xa7, 0xb6, 0xfe, 0x0a, 0x07, 0x7f, 0x94, 0x63, 0x47, 0x47, 0x69, 0xff, 0x88,
	0xf4, 0x4c, 0x0a, 0x75, 0xbd, 0xe7, 0x79, 0xdf, 0xfb, 0x78, 0x79, 0x17, 0x1d, 0x59, 0x95, 0xa1,
	0x89, 0x69, 0x55, 0x82, 0x8b, 0x5f, 0x91, 0xc0, 0x46, 0xa5, 0x45, 0xc2, 0xe0, 0xa4, 0x66, 0x91,
	0x67, 0x5d, 0xf1, 0xdf, 0x55, 0x3a, 0x9f, 0x29, 0xc2, 0xca, 0xef, 0x17, 0xfc, 0x78, 0xba, 0x8b,
	0x8f, 0x81, 0x82, 0x6b, 0xde, 0xf6, 0x55, 0x2e, 0x64, 0xbd, 0xe6, 0xa0, 0x73, 0x73, 0x11, 0x1d,
	0x96, 0x45, 0xd3, 0x3a, 0x9c, 0x54, 0x62, 0x10, 0xf1, 0x33, 0x42, 0x52, 0x5a, 0x3a, 0x52, 0xcf,
	0xb9, 0x99, 0xcb, 0x12, 0xdf, 0xc0, 0x86, 0x47, 0x3d, 0x36, 0x68, 0x26, 0xa7, 0x1e, 0x8d, 0xff,
	0xc8, 0x68, 0x07, 0xfa, 0x9f, 0x8c, 0x77, 0xfc, 0x7f, 0x23, 0x65, 0x55, 0xe1, 0x82, 0x3b, 0x1e,
	0xfa, 0x26, 0x09, 0x1a, 0x32, 0xca, 0xd1, 0x48, 0x5a, 0x58, 0x70, 0x0b, 0xd4, 0xb3, 0x90, 0xf5,
	0xd8, 0xa0, 0x95, 0x9c, 0x7b, 0x7e, 0x5f, 0xe1, 0x49, 0x4d, 0x83, 0x47, 0xde, 0x2f, 0xd4, 0x52,
	0x12, 0x6a, 0xb0, 0x2a, 0xd5, 0x20, 0xd3, 0xd5, 0xbb, 0x32, 0x94, 0x1b, 0x90, 0x25, 0xd8, 0x0c,
	0x0c, 0xa9, 0x39, 0xf8, 0x43, 0x5a, 0xc9, 0x65, 0xa1, 0x96, 0x93, 0x5a, 0x1c, 0xd6, 0xde, 0x68,
	0xaf, 0x0d, 0x1f, 0xbe, 0x36, 0x82, 0xad, 0x37, 0x82, 0xfd, 0x6c, 0x04, 0xfb, 0xd8, 0x8a, 0xc6,
	0x7a, 0x2b, 0x1a, 0xdf, 0x5b, 0xd1, 0x78, 0xba, 0x9a, 0xe7, 0xb4, 0x78, 0x49, 0xa3, 0x0c, 0x8b,
	0x58, 0xe7, 0x06, 0xe2, 0xfd, 0x9e, 0x7e, 0xbf, 0xf8, 0x70, 0xde, 0xb4, 0xed, 0x5f, 0x6f, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xf8, 0x30, 0xbe, 0xa3, 0x01, 0x00, 0x00,
}

func (m *VoterSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalStakingPower != 0 {
		i = encodeVarintVoter(dAtA, i, uint64(m.TotalStakingPower))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Voters) > 0 {
		for iNdEx := len(m.Voters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Voters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVoter(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VoterParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoterParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoterParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxTolerableByzantinePercentage != 0 {
		i = encodeVarintVoter(dAtA, i, uint64(m.MaxTolerableByzantinePercentage))
		i--
		dAtA[i] = 0x10
	}
	if m.VoterElectionThreshold != 0 {
		i = encodeVarintVoter(dAtA, i, uint64(m.VoterElectionThreshold))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoterSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Voters) > 0 {
		for _, e := range m.Voters {
			l = e.Size()
			n += 1 + l + sovVoter(uint64(l))
		}
	}
	if m.TotalStakingPower != 0 {
		n += 1 + sovVoter(uint64(m.TotalStakingPower))
	}
	return n
}

func (m *VoterParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VoterElectionThreshold != 0 {
		n += 1 + sovVoter(uint64(m.VoterElectionThreshold))
	}
	if m.MaxTolerableByzantinePercentage != 0 {
		n += 1 + sovVoter(uint64(m.MaxTolerableByzantinePercentage))
	}
	return n
}

func sovVoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoter(x uint64) (n int) {
	return sovVoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoterSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoter
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voters = append(m.Voters, &Validator{})
			if err := m.Voters[len(m.Voters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalStakingPower", wireType)
			}
			m.TotalStakingPower = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalStakingPower |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VoterParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoterParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoterParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoterElectionThreshold", wireType)
			}
			m.VoterElectionThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoterElectionThreshold |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxTolerableByzantinePercentage", wireType)
			}
			m.MaxTolerableByzantinePercentage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxTolerableByzantinePercentage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoter = fmt.Errorf("proto: unexpected end of group")
)
